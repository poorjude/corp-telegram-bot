#
# –ú–æ–¥—É–ª—å —Å—Ç–∞–¥–∏–∏ chancelleryOrder: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞–∫–∞–∑ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é 
# –∏ –ø—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã. –ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑. 
# –°–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—ã Excel –¥–≤–∞–∂–¥—ã: –≤–æ "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π" —Ç–∞–±–ª–∏—Ü–µ –∏ "–≤–Ω–µ—à–Ω–µ–π" —Ç–∞–±–ª–∏—Ü–µ.
# "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è" —Ç–∞–±–ª–∏—Ü–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ; —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö. "–í–Ω–µ—à–Ω—è—è" –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º 
# —Ñ–∞–π–ª–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω; —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ 
# –Ω–µ–π –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ "üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏ —É HR üìù" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
#

import shutil
import os.path
import datetime
import aiogram as ag

import modules.common as common

rt = ag.Router()

# –ü–æ–ª–Ω—ã–π –ø—É—Ç—å "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π" Excel-—Ç–∞–±–ª–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã. –î–æ–ª–∂–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –¥–∏—Å–∫–µ
LOCAL_CHANCELLERY_ORDER_EXCEL_FILE_PATH = r".\chancelleryOrder\internalExcel\chancelleryOrders.xlsx"
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å "–≤–Ω–µ—à–Ω—è—è" Excel-—Ç–∞–±–ª–∏—Ü–∞. –ú–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ (—á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –ø—É—Ç—å 
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä)
SERVER_CHANCELLERY_ORDER_FOLDER_PATH = r".\chancelleryOrder\externalExcel"
# –ü–æ–ª–Ω—ã–π –ø—É—Ç—å "–≤–Ω–µ—à–Ω–µ–π" Excel-—Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä. –ú–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
SERVER_CHANCELLERY_ORDER_EXCEL_FILE_PATH = r".\chancelleryOrder\externalExcel\–ó–∞–∫–∞–∑—ã –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏.xlsx"

# –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Excel-—Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
def enterChancelleryOrderToExcel_Local(stateData: dict):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û –∏ –æ—Ç–¥–µ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ stateData, –∫–æ–ø–∏—Ä—É–µ–º/–ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
    currOrderFullData = {}
    for i in range(len(STATE_DATA_COMMON_KEYS)):
        serviceKey = STATE_DATA_COMMON_KEYS[i][0]
        # if serviceKey not in stateData: 
        #     continue
        currOrderFullData[serviceKey] = stateData[serviceKey]

    stateDataKeys = STATE_DATA_COMMON_KEYS + STATE_DATA_PRODUCT_KEYS
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –±—É–¥–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π excel-—Ñ–∞–π–ª
    savedProductsArr = stateData[STATE_DATA_SAVED_PRODUCTS_KEY]
    for i in range(len(savedProductsArr)):
        savedProduct = savedProductsArr[i]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–¥–µ–ª—å–Ω–æ–º –∑–∞–∫–∞–∑–µ –∏–∑ savedProduct, –∫–æ–ø–∏—Ä—É–µ–º/–ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
        for k in range(len(STATE_DATA_PRODUCT_KEYS)):
            serviceKey = STATE_DATA_PRODUCT_KEYS[k][0]
            currOrderFullData[serviceKey] = savedProduct[serviceKey]
        common.enterStateDataToExcel(currOrderFullData, stateDataKeys, LOCAL_CHANCELLERY_ORDER_EXCEL_FILE_PATH)

# –ö–æ—Ä—Ç–µ–∂–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞: "stateData = await state.get_data()".
# STATE_DATA_<...>_KEYS —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∫–æ—Ä—Ç–µ–∂–∏, –≤ –∫–∞–∂–¥–æ–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö 2 —ç–ª–µ–º–µ–Ω—Ç–∞: (stateDataKey, humanReadableKey).
# serviceKey - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è stateData, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–º –¥–∞–Ω–Ω—ã–µ: stateData[serviceKey],
# humanReadableKey - —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ stateDataKey, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
STATE_DATA_COMMON_KEYS: tuple[tuple[str, str]] = (
    ("dateAndTime", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
    ("fullName", "–§–ò–û"),
    ("department", "–û—Ç–¥–µ–ª")
)
STATE_DATA_PRODUCT_KEYS: tuple[tuple[str, str]] = (
    ("productName", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"),
    ("articleOrLink", "–ê—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫–∞"),
    ("amount", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
)

# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è stateData, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: 
# savedProductsArr = stateData[STATE_DATA_SAVED_PRODUCTS_KEY]
STATE_DATA_SAVED_PRODUCTS_KEY = "savedProducts"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class chancelleryOrder(ag.fsm.state.StatesGroup):
    enteringFullName = ag.fsm.state.State()
    enteringDepartment = ag.fsm.state.State()
    enteringProductName = ag.fsm.state.State()
    enteringArticleOrLink = ag.fsm.state.State()
    enteringAmount = ag.fsm.state.State()
    productApproval = ag.fsm.state.State()
    orderAnotherProductOrNot = ag.fsm.state.State()
    finalApproval = ag.fsm.state.State()

@rt.message(ag.filters.StateFilter(chancelleryOrder.enteringFullName))
async def chancelleryOrder_enteringFullName_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    await state.update_data(fullName=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
    await state.set_state(chancelleryOrder.enteringDepartment)

@rt.message(ag.filters.StateFilter(chancelleryOrder.enteringDepartment))
async def chancelleryOrder_enteringDepartment_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    await state.update_data(department=message.text)
    await message.answer(
        '–ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞.'
    )
    await message.answer("1Ô∏è‚É£ –∏–∑ 3Ô∏è‚É£\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
    await state.set_state(chancelleryOrder.enteringProductName)

@rt.message(ag.filters.StateFilter(chancelleryOrder.enteringProductName))
async def chancelleryOrder_enteringProductName_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    await state.update_data(productName=message.text)
    await message.answer("2Ô∏è‚É£ –∏–∑ 3Ô∏è‚É£\n–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
    await state.set_state(chancelleryOrder.enteringArticleOrLink)

@rt.message(ag.filters.StateFilter(chancelleryOrder.enteringArticleOrLink))
async def chancelleryOrder_enteringArticleOrLink_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    await state.update_data(articleOrLink=message.text)
    await message.answer("3Ô∏è‚É£ –∏–∑ 3Ô∏è‚É£\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
    await state.set_state(chancelleryOrder.enteringAmount)

@rt.message(ag.filters.StateFilter(chancelleryOrder.enteringAmount))
async def chancelleryOrder_enteringAmount_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    await state.update_data(amount=message.text)
    stateData = await state.get_data()
    await message.answer(
        "–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä.\n\n" + 
        common.createStringFromStateData(stateData, STATE_DATA_PRODUCT_KEYS) + 
        "–í—Å—ë –≤–µ—Ä–Ω–æ? –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∑–∞–∫–∞–∑–µ?",
        reply_markup=common.STD_YES_OR_NO_KB,
        parse_mode="MARKDOWN"
    )
    await state.set_state(chancelleryOrder.productApproval)

@rt.message(ag.filters.StateFilter(chancelleryOrder.productApproval))
async def chancelleryOrder_productApproval_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    if message.text == common.YES_IN_STD_YES_OR_NO_KB:
        await message.answer("–¢–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –í–∞—à –∑–∞–∫–∞–∑.")

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —Å–ª–æ–≤–∞—Ä–µ stateData, 
        # –≤ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (—Å–∞–º –º–∞—Å—Å–∏–≤ —Ç–æ–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ stateData)
        stateData = await state.get_data()
        savedProduct = {}
        for i in range(len(STATE_DATA_PRODUCT_KEYS)):
            serviceKey = STATE_DATA_PRODUCT_KEYS[i][0]
            savedProduct[serviceKey] = stateData[serviceKey]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–∞—Å—Å–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        if STATE_DATA_SAVED_PRODUCTS_KEY in stateData:
            savedProductsArr = stateData[STATE_DATA_SAVED_PRODUCTS_KEY]
            savedProductsArr.append(savedProduct)
        else:
            savedProductsArr = [savedProduct]
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        await state.update_data(savedProducts=savedProductsArr)

        await message.answer("–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä?", reply_markup=common.STD_YES_OR_NO_KB)
        await state.set_state(chancelleryOrder.orderAnotherProductOrNot)
    elif message.text == common.NO_IN_STD_YES_OR_NO_KB:
        # (–ù–µ –≤–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–æ–≤–∞—Ä–µ –≤ –º–∞—Å—Å–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
        await message.answer("–¢–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –í–∞—à –∑–∞–∫–∞–∑.")
        await message.answer("–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä?", reply_markup=common.STD_YES_OR_NO_KB)
        await state.set_state(chancelleryOrder.orderAnotherProductOrNot)
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
        await message.answer(common.ANSWER_TO_INCORRECT_CHOICE_IN_KB)

@rt.message(ag.filters.StateFilter(chancelleryOrder.orderAnotherProductOrNot))
async def chancelleryOrder_orderAnotherProductOrNot_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    if message.text == common.YES_IN_STD_YES_OR_NO_KB:
        await message.answer(
            '–ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞. \n\n–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–ª–∞–µ—Ç—Å—è —Å —Å–∞–π—Ç–∞ "komus.ru".'
        )
        await message.answer("1Ô∏è‚É£ –∏–∑ 3Ô∏è‚É£\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
        await state.set_state(chancelleryOrder.enteringProductName)
    elif message.text == common.NO_IN_STD_YES_OR_NO_KB:
        stateData = await state.get_data()
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ –∏—Ç–æ–≥—É, –Ω–µ –∑–∞–∫–∞–∑–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if STATE_DATA_SAVED_PRODUCTS_KEY not in stateData:
            await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∑–∞–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            await common.executeCorrectEndingOfSession(message, state)
        else:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–§–ò–û, –æ—Ç–¥–µ–ª)
            messageToSend = common.createStringFromStateData(stateData, STATE_DATA_COMMON_KEYS)
            # –î–æ–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            savedProductsArr = stateData[STATE_DATA_SAVED_PRODUCTS_KEY]
            for i in range(len(savedProductsArr)):
                messageToSend += common.createStringFromStateData(savedProductsArr[i], STATE_DATA_PRODUCT_KEYS)
            
            await message.answer(
                "–ò—Ç–∞–∫, —É –í–∞—Å –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.\n\n" + messageToSend + "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É?",
                reply_markup=common.STD_YES_OR_NO_KB,
                parse_mode="MARKDOWN"
            )
            await state.set_state(chancelleryOrder.finalApproval)
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
        await message.answer(common.ANSWER_TO_INCORRECT_CHOICE_IN_KB)

@rt.message(ag.filters.StateFilter(chancelleryOrder.finalApproval))
async def chancelleryOrder_orderAnotherProductOrNot_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext, bot: ag.Bot):
    if message.text == common.YES_IN_STD_YES_OR_NO_KB:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        currDateAndTime = datetime.datetime.now().strftime(r"%d-%m-%Y %H:%M:%S")
        await state.update_data(dateAndTime=currDateAndTime)

        # –°–æ–±–∏—Ä–∞–µ–º —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–§–ò–û, –æ—Ç–¥–µ–ª)
        stateData = await state.get_data()
        messageToSend = common.createStringFromStateData(stateData, STATE_DATA_COMMON_KEYS)
        # –î–æ–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        savedProductsArr = stateData[STATE_DATA_SAVED_PRODUCTS_KEY]
        for i in range(len(savedProductsArr)):
            messageToSend += common.createStringFromStateData(savedProductsArr[i], STATE_DATA_PRODUCT_KEYS)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–∫–∞–∑ –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É
        await bot.send_message(
            common.STAFF_TO_MESSAGE.officeManager,
            "üìù –ë—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤. üìù\n\n" + messageToSend,
            parse_mode="MARKDOWN"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤–æ "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π" Excel-—Ñ–∞–π–ª, —Ö—Ä–∞–Ω—è—â–∏–π—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
        enterChancelleryOrderToExcel_Local(stateData)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É/–ø–∞–ø–∫–µ, –∫—É–¥–∞ –º—ã —Ö–æ—Ç–∏–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å "–≤–Ω–µ—à–Ω–∏–π" Excel-—Ñ–∞–π–ª
        if os.path.exists(SERVER_CHANCELLERY_ORDER_FOLDER_PATH):
            # –ö–æ–ø–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            shutil.copy(LOCAL_CHANCELLERY_ORDER_EXCEL_FILE_PATH, SERVER_CHANCELLERY_ORDER_EXCEL_FILE_PATH)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É
            await bot.send_message(
                common.STAFF_TO_MESSAGE.officeManager,
                "–ó–∞–∫–∞–∑ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–∏–π Excel-—Ñ–∞–π–ª:\n" +
                f"`{SERVER_CHANCELLERY_ORDER_EXCEL_FILE_PATH}`",
                parse_mode="MARKDOWN"
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É
            await bot.send_message(
                common.STAFF_TO_MESSAGE.officeManager,
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel-—Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–¥–∞–ª–æ—Å—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É," + 
                "—á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏ –≤—ã–¥–∞–Ω—ã –ª–∏ —Å–µ—Ä–≤–µ—Ä—É —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ:\n" + 
                f"`{SERVER_CHANCELLERY_ORDER_FOLDER_PATH}`",
                parse_mode="MARKDOWN"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ IT
            await bot.send_message(
                common.STAFF_TO_MESSAGE.IT,
                'üòî –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–ª –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é (–ø—É–Ω–∫—Ç –º–µ–Ω—é "üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏ —É HR üìù") ' +
                "–∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –Ω–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel-—Ñ–∞–π–ª –Ω–∞ —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä.\n\n" +
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏ –≤—ã–¥–∞–Ω—ã –ª–∏ —Å–µ—Ä–≤–µ—Ä—É —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:\n" + 
                f"`{SERVER_CHANCELLERY_ORDER_FOLDER_PATH}`"
                "\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–∞ –ª–µ–∂–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É—Ç–∏:\n"
                f"`{LOCAL_CHANCELLERY_ORDER_EXCEL_FILE_PATH}`",
                parse_mode="MARKDOWN"
            )
        await message.answer("üéâ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É.")
        await common.executeCorrectEndingOfSession(message, state)
    elif message.text == common.NO_IN_STD_YES_OR_NO_KB:
        await message.answer("üòî –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        await common.executeCorrectEndingOfSession(message, state)
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
        await message.answer(common.ANSWER_TO_INCORRECT_CHOICE_IN_KB)