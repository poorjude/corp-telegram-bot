#
# –ú–æ–¥—É–ª—å —Å—Ç–∞–¥–∏–∏ staffDirectory: –∑–¥–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –≤ –∫–æ–º–ø–∞–Ω–∏–∏, –∞ –∏–º–µ–Ω–Ω–æ:
# —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ—Ç–¥–µ–ª, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—á—Ç—É, —Ç–µ–ª–µ–≥—Ä–∞–º. –ü–µ—Ä–≤–∏—á–Ω–æ –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º,
# –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –§–ò–û.
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ "üë®üèª –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üë©üèº‚Äçü¶±" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
#

import aiogram as ag

import modules.common as common

rt = ag.Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class staffDirectory(ag.fsm.state.StatesGroup):
    choosingDepartment = ag.fsm.state.State()
    choosingEmployee = ag.fsm.state.State()

@rt.message(ag.filters.StateFilter(staffDirectory.choosingDepartment))
async def staffDirectory_choosingDepartment_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    if message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.", reply_markup=ag.types.ReplyKeyboardRemove()) 
        await common.executeCorrectEndingOfSession(message, state)
    elif message.text not in common.DEPARTMENTS_IN_STAFF_INFO: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
        await message.answer(common.ANSWER_TO_INCORRECT_CHOICE_IN_KB)
    elif len(common.STAFF_INFO[message.text]) == 0: # –ï—Å–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –æ—Ç–¥–µ–ª.")
    else:
        chosenDep = message.text
        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ
        employeeData = []
        for employee in common.STAFF_INFO[chosenDep]:
            employeeData.append([ag.types.KeyboardButton(text=employee["–§–ò–û"])])
        employeeData.append([ag.types.KeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")])
        choosingEmployee_kb = ag.types.ReplyKeyboardMarkup(
            keyboard=employeeData,
            resize_keyboard=True,
            input_field_placeholder=common.STD_INPUT_FIELD_PLACEHOLDER
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª
        await state.update_data(chosenDep=chosenDep)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –í–∞—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", reply_markup=choosingEmployee_kb)
        await state.set_state(staffDirectory.choosingEmployee)

@rt.message(ag.filters.StateFilter(staffDirectory.choosingEmployee))
async def staffDirectory_choosingEmployee_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    if message.text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞–¥–∏–∏ staffDirectory.choosingDepartment
        staffDirectory_choosingDepartment_kb = ag.types.ReplyKeyboardMarkup(
            keyboard=
                list(map(lambda dep: [ag.types.KeyboardButton(text=dep)], common.DEPARTMENTS_IN_STAFF_INFO)) 
                + [[ag.types.KeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]],
            resize_keyboard=True,
            input_field_placeholder=common.STD_INPUT_FIELD_PLACEHOLDER
        )
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É –æ—Ç–¥–µ–ª–æ–≤.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –æ—Ç–¥–µ–ª.",
            reply_markup=staffDirectory_choosingDepartment_kb
        )
        await state.set_state(staffDirectory.choosingDepartment)
    else:
        # "–í—Å–ø–æ–º–∏–Ω–∞–µ–º" –æ—Ç–¥–µ–ª, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–¥–Ω–∏–º —à–∞–≥–æ–º —Ä–∞–Ω–µ–µ
        stateData = await state.get_data()
        chosenDep = stateData["chosenDep"]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –µ—Å–ª–∏ –¥–∞, —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        isMsgCorrect = False
        for employee in common.STAFF_INFO[chosenDep]:
            if message.text == employee["–§–ò–û"]:
                chosenEmployee = employee
                isMsgCorrect = True
        if not isMsgCorrect: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            await message.answer(common.ANSWER_TO_INCORRECT_CHOICE_IN_KB)
        else:
            # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
            msgToSend = ""
            for field in common.KEYS_FOR_EMPLOYEE_IN_STAFF_INFO:
                if chosenEmployee[field] == "":
                    continue
                msgToSend += field + ":\n" + chosenEmployee[field] + "\n\n"
            if chosenEmployee["photo_id"] != "": # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                await message.answer_photo(photo=chosenEmployee["photo_id"], caption=msgToSend)
            else:
                await message.answer(msgToSend)
            await message.answer("–°–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –í–∞—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
            # (–ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä)