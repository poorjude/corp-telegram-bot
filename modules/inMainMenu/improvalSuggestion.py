#
# –ú–æ–¥—É–ª—å —Å—Ç–∞–¥–∏–∏ improvalSuggestion: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–¥–∏—Ä–µ–∫—Ç–æ—Ä—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
# —Ä–∞–±–æ—Ç—ã –≤ –Ω–µ–π, –≤ —Ü–µ–ª–æ–º, —Å–≤–æ–∏ –∏–¥–µ–∏, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –º—ã—Å–ª–∏. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –∫–∞–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ, —Ç–∞–∫ –∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –§–ò–û.
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ üì©" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
#

import datetime
import aiogram as ag

import modules.common as common

rt = ag.Router()

# –ö–æ—Ä—Ç–µ–∂ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞: "stateData = await state.get_data()".
# STATE_DATA_KEYS —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∫–æ—Ä—Ç–µ–∂–∏, –≤ –∫–∞–∂–¥–æ–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö 2 —ç–ª–µ–º–µ–Ω—Ç–∞: (stateDataKey, humanReadableKey).
# serviceKey - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è stateData, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–º –¥–∞–Ω–Ω—ã–µ: stateData[serviceKey],
# humanReadableKey - —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ stateDataKey, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
STATE_DATA_KEYS: tuple[tuple[str, str]] = (
    ("dateAndTime", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
    ("fullName", "–§–ò–û"),
    ("suggestion", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class improvalSuggestion(ag.fsm.state.StatesGroup):
    anonOrNot = ag.fsm.state.State()
    enteringFullName = ag.fsm.state.State()
    enteringSuggestion = ag.fsm.state.State()
    finalApproval = ag.fsm.state.State()

@rt.message(ag.filters.StateFilter(improvalSuggestion.anonOrNot))
async def improvalSuggestion_anonOrNot_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    if message.text == "–ê–Ω–æ–Ω–∏–º–Ω–æ":
        await state.update_data(fullName="–ê–Ω–æ–Ω–∏–º–Ω–æ")
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)."
        )
        await state.set_state(improvalSuggestion.enteringSuggestion)
    elif message.text == "–° —É–∫–∞–∑–∞–Ω–∏–µ–º –§–ò–û":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
        await state.set_state(improvalSuggestion.enteringFullName)
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
        await message.answer(common.ANSWER_TO_INCORRECT_CHOICE_IN_KB)

@rt.message(ag.filters.StateFilter(improvalSuggestion.enteringFullName))
async def improvalSuggestion_enteringFullName_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    await state.update_data(fullName=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)."
    )
    await state.set_state(improvalSuggestion.enteringSuggestion)

@rt.message(ag.filters.StateFilter(improvalSuggestion.enteringSuggestion))
async def improvalSuggestion_enteringSuggestion_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext):
    await state.update_data(suggestion=message.text)
    stateData = await state.get_data()
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –í–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?\n\n" +
        common.createStringFromStateData(stateData, STATE_DATA_KEYS),
        reply_markup=common.STD_YES_OR_NO_KB,
        parse_mode="MARKDOWN"
    )
    await state.set_state(improvalSuggestion.finalApproval)

@rt.message(ag.filters.StateFilter(improvalSuggestion.finalApproval))
async def improvalSuggestion_finalApproval_handler(message: ag.types.Message, state: ag.fsm.context.FSMContext, bot: ag.Bot):
    if message.text == common.YES_IN_STD_YES_OR_NO_KB:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        currDateAndTime = datetime.datetime.now().strftime(r"%d-%m-%Y %H:%M:%S")
        await state.update_data(dateAndTime=currDateAndTime)
        stateData = await state.get_data()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ HR-–æ—Ç–¥–µ–ª
        await bot.send_message(
            common.STAFF_TO_MESSAGE.HR, 
            "üì© –ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏. üì©\n\n" + 
            common.createStringFromStateData(stateData, STATE_DATA_KEYS),
            parse_mode="MARKDOWN"
        )
        await message.answer("üéâ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ HR-–æ—Ç–¥–µ–ª. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É.")
        await common.executeCorrectEndingOfSession(message, state)
    elif message.text == common.NO_IN_STD_YES_OR_NO_KB:
        await message.answer(
            "üòî –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤–æ–µ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        await common.executeCorrectEndingOfSession(message, state)
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
        await message.answer(common.ANSWER_TO_INCORRECT_CHOICE_IN_KB)